My Python Pre-Flight Checklist
##############################
:date: 2020-05-27 02:12
:author: cpatti
:category: Uncategorized
:slug: 676
:status: draft

I've been using Python professionally for about 5 years, and over the last year have spent countless hours over 3 courses striving to move from Novice to Journeyman.

I'm ill equipped to determine whether or not I have conclusively Arrived, but what I can say is that I've built up a little punch list of things to remind myself of every time I sit down to code.

These are things I keep forgetting until I'm knee deep in an inappropriate solution to a problem, or stuck on something because I've coded myself into an intractable corner.

Without any further ado, here they are.

You Probably want a dictionary
------------------------------

I'm sure object oriented programming zealots will argue with me here, suggesting that you should reach for a class every time you need a data structure, as my esteemed co-worker Jack Dietrich said in his excellent Pycon talk `Stop Writing Classes <https://www.youtube.com/watch?v=o9pEzgHorH0>`__ - they can often actually get in the way if you don't actually need them.

Python dictionaries are incredibly powerful and flexible, and as of Python 3 they're ordered by default. You'd be surprised how many problems fit neatly into a dictionary since it can contain arbitrary types in arbitrary combinations, so ask yourself whether a dictionary can meet your needs before reaching for something more complex.

Use an IDE
----------

You're going to see a lot of old hands and very accomplished people telling you that IDEs are for chumps, and that Real Programmers (TM) only need their editor of choice and a shell to sail it by.

And, for them, that's absolutely true. They don't need the guide rails that using a good IDE provides, or the excellent debugging capabilities it offers, because they know all the constructs by heart, can hold an incredibly complex object graph in their heads, and have seen 99/100 of the problems you might encounter and know the fix before the stack trace is finished printing. If you're reading this article, then that isn't you, and an IDE can really help.

`Pycharm <https://www.jetbrains.com/pycharm/>`__ and `Visual Studio Code <https://code.visualstudio.com/>`__ are both excellent choices and are cross platform so you can use the same tools anywhere you go. That's a big leg up. Who knows what operating system the standard issue laptop in your next job might be?

If a full IDE isn't available, consider using the excellent text based Python debugger `PDB <https://docs.python.org/3/library/pdb.html>`__, it has the benefit of working over things like ssh connections and security bastions which may be either impossible or very difficult to configure for an IDE.

Use the repl, luke!
-------------------

One of the things I very much enjoy about working in Python and languages like it is the ability to noodle around with and prototype various expressions and statements interactively in real time and in arbitrarily sized chunks.

Pycharm at least has excellent support for the REPL as a part of its debugger. I suspect VSCode offers much the same.

To give you an example of what I mean, I often have to parse large and complicated JSON blobs as a part of my day to day work, were I to do this the more formal way - writing a section of script, saving it in the editor, running it, etc. That creates a lot of unnecessary overhead. I want to know IMMEDIATELY if the expression I type yields the correct result. If it does, I can then pluck that fully formed expression and paste it into my editor buffer for use in the actual code I'm developing.

If you're not using an IDE, `IPython <https://ipython.org/>`__ is a superb REPL environment with excellent tab completion for methods and properties, so rather than having to memorize MyComplexClass.super_long_method_name(long,list,of,params) I can type MyC<Tab>.super<Tab> and iPython will fill in the rest. Magic :) And a huge time and cognitive load savings.
